"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var xml2js_1 = __importDefault(require("xml2js"));
function asyncParseString(xml) {
    return new Promise(function (resolve, reject) {
        var options = {
            trim: true,
            explicitArray: false,
            attrkey: '_attrs',
        };
        xml2js_1.default.parseString(xml, options, function (err, obj) {
            if (err) {
                reject(err);
            }
            resolve(obj);
        });
    });
}
// dotでアクセスできないkeyを置換する
// アクセス可能なkey pattern: [a-zA-Z_$][0-9a-zA-Z_$]*
// -> 冒頭が数値の場合は_を付加。マッチしない文字はすべて_に置換。
// $は_に変換
var getEscapedKey = function (key) {
    return key.replace(/^([0-9])/, '_$1').replace(/[^0-9a-zA-Z_$]/g, '_').replace('$', '_');
};
var getEscapedData = function (data) {
    if (!data || typeof data !== 'object')
        return data;
    // array
    if (Array.isArray(data)) {
        return data.map(function (item) { return getEscapedData(item); });
    }
    // object
    return Object.entries(data).reduce(function (acc, _a) {
        var _b;
        var key = _a[0], val = _a[1];
        return (__assign({}, acc, (_b = {}, _b[getEscapedKey(key)] = getEscapedData(val), _b)));
    }, {});
};
function extracted(item) {
    Object.keys(item).forEach(function (prop) {
        if (item[prop].hasOwnProperty('_attrs')) {
            Object.keys(item[prop]['_attrs']).forEach(function (attr) {
                var fieldName = prop + '_' + attr;
                item[fieldName] = item[prop]['_attrs'][attr];
            });
            delete item[prop]['_attrs'];
            if (item[prop].hasOwnProperty('_')) {
                item[prop] = item[prop]['_'];
            }
            if (Object.keys(item[prop]).length === 0) {
                delete item[prop];
            }
        }
        if (item[prop] instanceof Object && !(item[prop] instanceof Array)) {
            extracted(item[prop]);
        }
    });
}
var flattenAttrs = function (item) {
    if (item.hasOwnProperty('_attrs')) {
        Object.keys(item['_attrs']).forEach(function (attr) {
            var fieldName = 'item_' + attr;
            item[fieldName] = item['_attrs'][attr];
        });
    }
    delete item['_attrs'];
    extracted(item);
    return item;
};
function toJson(feedUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var res, obj, channel;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1.default.get(feedUrl, {
                        timeout: 100000,
                        responseType: 'document',
                        headers: {
                            'User-Agent': 'rss-converter',
                            'Accept': 'application/rss+xml'
                        }
                    }).then(function (res) {
                        return res;
                    }).catch(function (e) {
                        console.log(e);
                        throw e;
                    })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, asyncParseString(res.data)];
                case 2:
                    obj = _a.sent();
                    if (obj.hasOwnProperty('rss')) {
                        // RSS 2.0
                        obj.rss.channel.items = obj.rss.channel.item;
                        delete obj.rss.channel.item;
                        // flatten attrs
                        if (Array.isArray(obj.rss.channel.items)) {
                            obj.rss.channel.items = obj.rss.channel.items.map(function (item) {
                                return flattenAttrs(item);
                            });
                        }
                        else {
                            obj.rss.channel.items = [flattenAttrs(obj.rss.channel.items)];
                        }
                        // escape data
                        channel = getEscapedData(obj.rss.channel);
                    }
                    else if (obj.hasOwnProperty('rdf:RDF')) {
                        // RSS 1.0
                        obj['rdf:RDF'].channel.items = obj['rdf:RDF'].item;
                        delete obj['rdf:RDF'].item;
                        // flatten attrs
                        if (Array.isArray(obj['rdf:RDF'].channel.items)) {
                            obj['rdf:RDF'].channel.items = obj['rdf:RDF'].channel.items.map(function (item) {
                                return flattenAttrs(item);
                            });
                        }
                        else {
                            obj['rdf:RDF'].channel.items = [flattenAttrs(obj['rdf:RDF'].channel.items)];
                        }
                        // escape data
                        channel = getEscapedData(obj['rdf:RDF'].channel);
                    }
                    else {
                        // ATOM
                        obj.feed.items = obj.feed.entry;
                        delete obj.feed.entry;
                        // flatten attrs
                        if (Array.isArray(obj.feed.items)) {
                            obj.feed.items = obj.feed.items.map(function (item) {
                                item.link = item.link._attrs.href;
                                return flattenAttrs(item);
                            });
                        }
                        else {
                            obj.feed.items.link = obj.feed.items.link._attrs.href;
                            obj.feed.items = [flattenAttrs(obj.feed.items)];
                        }
                        // escape data
                        channel = getEscapedData(obj.feed);
                    }
                    return [2 /*return*/, channel];
            }
        });
    });
}
exports.toJson = toJson;
