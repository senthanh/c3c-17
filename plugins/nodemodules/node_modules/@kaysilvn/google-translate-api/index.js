const fetch = require("node-fetch");
const { getIsoCodes } = require("./iso639_1.js");

module.exports = class Translator {
    constructor() {}

    /**
     * Translate with iso-639_1 (support both callback and promise)
     * @param {string} text Text to translate
     * @param {object} opts Options
     * @param {function} callback Callback
     * @returns {promise} string
     */
    async translate (text, opts, callback) {
        if (typeof callback === "function") {
            try {
                if (typeof text !== "string") return callback(`ERR: Field "text" must be string`)
                if (typeof opts !== "object" && !Array.isArray(opts)) return callback(`ERR: Field "opts" must be object`)

                var { src_lang, tar_lang } = opts;

                if (getIsoCodes().indexOf(src_lang) === -1) return callback(`ERR: Field "src_lang" must be iso639_1 code`);
                if (getIsoCodes().indexOf(tar_lang) === -1) return callback(`ERR: Field "tar_lang" must be iso639_1 code`);

                var translateResponse = await fetch(`http://translate.googleapis.com/translate_a/single?client=gtx&dt=t&sl=${encodeURIComponent(src_lang)}&tl=${encodeURIComponent(tar_lang)}&q=${encodeURIComponent(text)}`).then(res => res.json());
                var translateResponse = translateResponse[0].map(el => el[0]).join(" ");
    
                return callback(null, translateResponse)
            } catch (err) {
                return callback(err)
            };
        } else {
            try {
                if (typeof text !== "string") throw new Error(`ERR: Field "text" must be string`)
                if (typeof opts !== "object" && !Array.isArray(opts)) throw new Error(`ERR: Field "opts" must be object`)

                var { src_lang, tar_lang } = opts;

                if (getIsoCodes().indexOf(src_lang) === -1) throw new Error(`ERR: Field "src_lang" must be iso639_1 code`);
                if (getIsoCodes().indexOf(tar_lang) === -1) throw new Error(`ERR: Field "tar_lang" must be iso639_1 code`);

                var translateResponse = await fetch(`http://translate.googleapis.com/translate_a/single?client=gtx&dt=t&sl=${encodeURIComponent(src_lang)}&tl=${encodeURIComponent(tar_lang)}&q=${encodeURIComponent(text)}`).then(res => res.json());
                var translateResponse = translateResponse[0].map(el => el[0]).join(" ");
    
                return translateResponse;
            } catch (err) {
                throw err;
            };
        };
    };

    /**
     * Text to speech (support both callback and promise)
     * @param {string} text text to speech
     * @param {string} iso639_1 iso639_1 code
     * @param {function} callback callback
     * @returns {promise} Buffer
     */
    async speech (text, iso639_1, callback) {
        if (typeof callback === "function") {
            try {
                if (typeof text !== "string") return callback(`ERR: Field "text" must be string`);
                if (typeof iso639_1 !== "string" || getIsoCodes().indexOf(iso639_1) === -1) return callback(`ERR: Field "iso639_1" must be iso639_1 code`);
                
                var speechResponse = await fetch(`https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=${encodeURIComponent(text)}&tl=${iso639_1}`).then(res => res.buffer());
                
                return callback(null, speechResponse);
            } catch (err) {
                return callback(err);
            };
        } else {
            try {
                if (typeof text !== "string") throw new Error(`ERR: Field "text" must be string`);
                if (typeof iso639_1 !== "string" || getIsoCodes().indexOf(iso639_1) === -1) throw new Error(`ERR: Field "iso639_1" must be iso639_1 code`);
                
                var speechResponse = await fetch(`https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=${encodeURIComponent(text)}&tl=${iso639_1}`).then(res => res.buffer());
                
                return speechResponse;
            } catch (err) {
                throw err;
            };
        };
    };
}